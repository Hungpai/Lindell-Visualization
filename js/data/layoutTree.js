function LayoutTree() {
    this.ltFiles = [];
    this.ltFiles['lindell.lt'] = `Program
	Name
		lindell
	StartOperation
		o_init
	Variables
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				f
			Type
				Char
			Show
				True
		Variable
			Name
				h
			Type
				Int
			Show
				True
		Variable
			Name
				k
			Type
				Int
			Show
				True
		Variable
			Name
				res
			Type
				Int
			Show
				True
		Variable
			Name
				s
			Type
				Tree
			Show
				True
		Variable
			Name
				seq
			Type
				Int
			Show
				True
		Variable
			Name
				sgt
			Type
				Int
			Show
				True
		Variable
			Name
				stk
			Type
				[(Int, Int, Int, Int, Int, Char)]
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				teq
			Type
				Int
			Show
				True
		Variable
			Name
				tgt
			Type
				Int
			Show
				True
		Variable
			Name
				u
			Type
				Node
			Show
				True
		Variable
			Name
				u1
			Type
				Node
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
		Variable
			Name
				v1
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				lindell
			Arguments
				Argument
					s
				Argument
					t
			Output
				res
	Operations
		Operation
			Name
				o_cmp
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("CMP(s[" ++ (show u') ++ "], t[" ++ (show v') ++ "])")
		Operation
			Name
				o_finds
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("S: Calculate orderprofile of Node u1 &#61 " ++ (show u1'))
				Assignment
					Variable
						f'
					Expression
						'S'
				Assignment
					Variable
						seq'
					Expression
						0
				Assignment
					Variable
						sgt'
					Expression
						0
				Assignment
					Variable
						teq'
					Expression
						0
				Assignment
					Variable
						tgt'
					Expression
						0
				Assignment
					Variable
						u1'
					Expression
						(getChild s u (createNode 0) k)
				Assignment
					Variable
						v1'
					Expression
						(getChild t v (createNode 0) k)
		Operation
			Name
				o_findt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("T: Calculate orderprofile of Node v1 &#61 " ++ (show v1'))
				Assignment
					Variable
						f'
					Expression
						'T'
				Assignment
					Variable
						u1'
					Expression
						(getChild s u (createNode 0) k)
				Assignment
					Variable
						v1'
					Expression
						(getChild t v (createNode 0) k)
		Operation
			Name
				o_gc
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Memoryless recursion")
				Assignment
					Variable
						k'
					Expression
						0
				Assignment
					Variable
						u'
					Expression
						(getChild s u (createNode 0) k)
				Assignment
					Variable
						v'
					Expression
						(getChild t v (createNode 0) k)
		Operation
			Name
				o_gt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("s[" ++ (show u') ++ "] &#8827 t[" ++ (show v') ++ "]")
				Assignment
					Variable
						res'
					Expression
						1
		Operation
			Name
				o_inch
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("(sgt,seq)" ++ " &#61 (" ++ (show sgt') ++ "," ++ (show seq') ++ ") &#61 " ++ "(tgt,teq)")
				Assignment
					Variable
						h'
					Expression
						(h + seq)
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("INIT")
				Assignment
					Variable
						k'
					Expression
						0
				Assignment
					Variable
						res'
					Expression
						0
				Assignment
					Variable
						stk'
					Expression
						[]
				Assignment
					Variable
						u'
					Expression
						(root s)
				Assignment
					Variable
						v'
					Expression
						(root t)
		Operation
			Name
				o_iso
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("s[" ++ (show u') ++ "] &#8773 t[" ++ (show v') ++ "]")
				Assignment
					Variable
						res'
					Expression
						0
		Operation
			Name
				o_lt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("s[" ++ (show u') ++ "] &#8826 t[" ++ (show v') ++ "]")
				Assignment
					Variable
						res'
					Expression
						-1
		Operation
			Name
				o_nb
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("k = " ++ (show (k')))
				Assignment
					Variable
						k'
					Expression
						(nextBlock s u k)
		Operation
			Name
				o_ncs
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("sgt &#61 " ++ (show sgt) ++ " &#8800 " ++ (show h') ++ " &#61 h")
				Assignment
					Variable
						seq'
					Expression
						0
				Assignment
					Variable
						sgt'
					Expression
						0
				Assignment
					Variable
						u1'
					Expression
						(getChild s u u1 k)
				Assignment
					Variable
						v1'
					Expression
						(getChild t v (createNode 0) k)
		Operation
			Name
				o_nct
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("tgt &#61 " ++ (show tgt) ++ " &#8800 " ++ (show h') ++ " &#61 h")
				Assignment
					Variable
						teq'
					Expression
						0
				Assignment
					Variable
						tgt'
					Expression
						0
				Assignment
					Variable
						u1'
					Expression
						(getChild s u (createNode 0) k)
				Assignment
					Variable
						v1'
					Expression
						(getChild t v v1 k)
		Operation
			Name
				o_nxts
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Change v1 to node " ++ (show v1'))
				Assignment
					Variable
						v1'
					Expression
						(getChild t v v1 k)
		Operation
			Name
				o_nxtt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Change u1 to node " ++ (show u1'))
				Assignment
					Variable
						u1'
					Expression
						(getChild s u u1 k)
		Operation
			Name
				o_push
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Store environment")
				Assignment
					Variable
						k'
					Expression
						0
				Assignment
					Variable
						stk'
					Expression
						(append stk (h,sgt,seq,tgt,teq,f))
				Assignment
					Variable
						u'
					Expression
						u1
				Assignment
					Variable
						v'
					Expression
						v1
		Operation
			Name
				o_ret
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Restore environment")
				Assignment
					Variable
						k'
					Expression
						(sizeLogspace s u)
				Assignment
					Variable
						u'
					Expression
						(parent s u)
				Assignment
					Variable
						v'
					Expression
						(parent t v)
		Operation
			Name
				o_ret2
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Current orderprofile of node " ++ (if (f' == 'S')\\n                                                then ("u1 &#61 " ++ (show u1') ++ " is (" ++ (show sgt') ++ "," ++ (show seq') ++ ")")\\n                                                else ("v1 &#61 " ++ (show v1') ++ " is (" ++ (show tgt') ++ "," ++ (show teq') ++ ")")))
				Assignment
					Variable
						f'
					Expression
						(get66 (last stk))
				Assignment
					Variable
						h'
					Expression
						(get61 (last stk))
				Assignment
					Variable
						k'
					Expression
						(sizeLogspace s u)
				Assignment
					Variable
						seq'
					Expression
						((get63 (last stk)) + (if ((f' == 'S') && (res' == 0))  then 1 else 0 ))
				Assignment
					Variable
						sgt'
					Expression
						((get62 (last stk)) + (if ((f' == 'S') && (res' == 1))  then 1 else 0 ))
				Assignment
					Variable
						stk'
					Expression
						(removeLast stk)
				Assignment
					Variable
						teq'
					Expression
						((get65 (last stk)) + (if ((f' == 'T') && (res' == 0))  then 1 else 0 ))
				Assignment
					Variable
						tgt'
					Expression
						((get64 (last stk)) + (if ((f' == 'T') && (res' == -1)) then 1 else 0 ))
				Assignment
					Variable
						u'
					Expression
						(parent s u)
				Assignment
					Variable
						u1'
					Expression
						u
				Assignment
					Variable
						v'
					Expression
						(parent t v)
				Assignment
					Variable
						v1'
					Expression
						v
		Operation
			Name
				o_seth
			Assignments
				Assignment
					Variable
						exp'
					Expression
						("Recursion with orderprofiles")
				Assignment
					Variable
						h'
					Expression
						0
	Predicates
		Predicate
			Name
				p_bcGt
			Expression
				((blockCardinality s u k) > 1)
		Predicate
			Name
				p_flag
			Expression
				(f == 'S')
		Predicate
			Name
				p_gt
			Expression
				(nonRecursiveCheck t s v u)
		Predicate
			Name
				p_hLt
			Expression
				(h < (blockCardinality s u k))
		Predicate
			Name
				p_lsize
			Expression
				((blockCardinality s (parent s u) (sizeLogspace s u)) == 1)
		Predicate
			Name
				p_lt
			Expression
				(nonRecursiveCheck s t u v)
		Predicate
			Name
				p_nb
			Expression
				((nextBlock s u k) /= 0)
		Predicate
			Name
				p_retGt
			Expression
				(res == 1)
		Predicate
			Name
				p_retLt
			Expression
				(res == (-1))
		Predicate
			Name
				p_retNb
			Expression
				((nextBlock s u k) /= 0)
		Predicate
			Name
				p_root
			Expression
				(isRoot s u)
		Predicate
			Name
				p_sgtEq
			Expression
				(h == sgt)
		Predicate
			Name
				p_slast
			Expression
				((getChild s (parent s u1) u1 k) == (createNode 0))
		Predicate
			Name
				p_stEq
			Expression
				(seq == teq)
		Predicate
			Name
				p_stLt
			Expression
				(seq < teq)
		Predicate
			Name
				p_tgtEq
			Expression
				(h == tgt)
		Predicate
			Name
				p_tlast
			Expression
				((getChild t (parent t v1) v1 k) == (createNode 0))
	Flow
		Operation
			Name
				o_cmp
			BDT
				p_lt
					o_lt
					p_gt
						o_gt
						p_nb
							o_nb
							o_iso
		Operation
			Name
				o_finds
			BDT
				o_push
		Operation
			Name
				o_findt
			BDT
				o_push
		Operation
			Name
				o_gc
			BDT
				o_cmp
		Operation
			Name
				o_gt
			BDT
				p_root
					HALT
					p_lsize
						o_ret
						o_ret2
		Operation
			Name
				o_inch
			BDT
				p_hLt
					o_finds
					p_retNb
						o_nb
						o_iso
		Operation
			Name
				o_init
			BDT
				o_cmp
		Operation
			Name
				o_iso
			BDT
				p_root
					HALT
					p_lsize
						o_ret
						o_ret2
		Operation
			Name
				o_lt
			BDT
				p_root
					HALT
					p_lsize
						o_ret
						o_ret2
		Operation
			Name
				o_nb
			BDT
				p_bcGt
					o_seth
					o_gc
		Operation
			Name
				o_ncs
			BDT
				o_push
		Operation
			Name
				o_nct
			BDT
				o_push
		Operation
			Name
				o_nxts
			BDT
				o_push
		Operation
			Name
				o_nxtt
			BDT
				o_push
		Operation
			Name
				o_push
			BDT
				o_cmp
		Operation
			Name
				o_ret
			BDT
				p_retLt
					o_lt
					p_retGt
						o_gt
						p_retNb
							o_nb
							o_iso
		Operation
			Name
				o_ret2
			BDT
				p_flag
					p_tlast
						p_sgtEq
							o_findt
							p_slast
								o_gt
								o_ncs
						o_nxts
					p_slast
						p_tgtEq
							p_stEq
								o_inch
								p_stLt
									o_gt
									o_lt
							p_tlast
								o_lt
								o_nct
						o_nxtt
		Operation
			Name
				o_seth
			BDT
				o_finds`;
	this.ltFiles['blockCardinality.lt'] = `Program
	Name
		blockCardinality
	StartOperation
		o_init
	Variables
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				k
			Type
				Int
			Show
				True
		Variable
			Name
				res
			Type
				Int
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				blockCardinality
			Arguments
				Argument
					t
				Argument
					v
				Argument
					k
			Output
				res
	Operations
		Operation
			Name
				o_incRes
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Update"
				Assignment
					Variable
						res'
					Expression
						(res + 1)
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"INIT"
				Assignment
					Variable
						res'
					Expression
						0
				Assignment
					Variable
						v'
					Expression
						(firstChild t v)
		Operation
			Name
				o_nxt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Next Sibling"
				Assignment
					Variable
						v'
					Expression
						(nextSibling t v)
	Predicates
		Predicate
			Name
				p_hasNextSibling
			Expression
				(hasNextSibling t v)
		Predicate
			Name
				p_sizeEqk
			Expression
				((sizeLogspace t v) == k)
	Flow
		Operation
			Name
				o_incRes
			BDT
				p_hasNextSibling
					o_nxt
					HALT
		Operation
			Name
				o_init
			BDT
				p_sizeEqk
					o_incRes
					p_hasNextSibling
						o_nxt
						HALT
		Operation
			Name
				o_nxt
			BDT
				p_sizeEqk
					o_incRes
					p_hasNextSibling
						o_nxt
						HALT`;
	this.ltFiles['getChild.lt'] = `Program
	Name
		getChild
	StartOperation
		o_init
	Variables
		Variable
			Name
				blockSize
			Type
				Int
			Show
				True
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				prev
			Type
				Node
			Show
				True
		Variable
			Name
				res
			Type
				Node
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				getChild
			Arguments
				Argument
					t
				Argument
					v
				Argument
					prev
				Argument
					blockSize
			Output
				res
	Operations
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"INIT"
				Assignment
					Variable
						res'
					Expression
						(createNode 0)
				Assignment
					Variable
						v'
					Expression
						(firstChild t v)
		Operation
			Name
				o_nxt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Next sibling"
				Assignment
					Variable
						v'
					Expression
						(nextSibling t v)
		Operation
			Name
				o_updt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Update"
				Assignment
					Variable
						res'
					Expression
						v
	Predicates
		Predicate
			Name
				p_firstRes
			Expression
				(((sizeLogspace t v) == (blockSize)) && (prev < v))
		Predicate
			Name
				p_hasNextSibling
			Expression
				(hasNextSibling t v)
		Predicate
			Name
				p_resEq0
			Expression
				(res == (createNode 0))
		Predicate
			Name
				p_updateRes
			Expression
				(((sizeLogspace t v) == (blockSize)) && (v < res) && (prev < res))
	Flow
		Operation
			Name
				o_init
			BDT
				p_firstRes
					o_updt
					p_hasNextSibling
						o_nxt
						HALT
		Operation
			Name
				o_nxt
			BDT
				p_resEq0
					p_firstRes
						o_updt
						p_hasNextSibling
							o_nxt
							HALT
					p_updateRes
						o_updt
						p_hasNextSibling
							o_nxt
							HALT
		Operation
			Name
				o_updt
			BDT
				p_hasNextSibling
					o_nxt
					HALT`;
	this.ltFiles['nextBlock.lt'] = `Program
	Name
		nextBlock
	StartOperation
		o_init
	Variables
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				k
			Type
				Int
			Show
				True
		Variable
			Name
				res
			Type
				Int
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				nextBlock
			Arguments
				Argument
					t
				Argument
					v
				Argument
					k
			Output
				res
	Operations
		Operation
			Name
				o_fc
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"First child"
				Assignment
					Variable
						v'
					Expression
						(firstChild t v)
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"INIT"
				Assignment
					Variable
						res'
					Expression
						0
		Operation
			Name
				o_nxt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Next sibling"
				Assignment
					Variable
						v'
					Expression
						(nextSibling t v)
		Operation
			Name
				o_updt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Update"
				Assignment
					Variable
						res'
					Expression
						(sizeLogspace t v)
	Predicates
		Predicate
			Name
				p_firstRes
			Expression
				((sizeLogspace t v) > k)
		Predicate
			Name
				p_hasFirstChild
			Expression
				((firstChild t v) /= (createNode 0))
		Predicate
			Name
				p_hasNextSibling
			Expression
				(hasNextSibling t v)
		Predicate
			Name
				p_resEq0
			Expression
				(res == 0)
		Predicate
			Name
				p_updateRes
			Expression
				((sizeLogspace t v) < res) && ((sizeLogspace t v) > k)
	Flow
		Operation
			Name
				o_fc
			BDT
				p_firstRes
					o_updt
					p_hasNextSibling
						o_nxt
						HALT
		Operation
			Name
				o_init
			BDT
				p_hasFirstChild
					o_fc
					HALT
		Operation
			Name
				o_nxt
			BDT
				p_resEq0
					p_firstRes
						o_updt
						p_hasNextSibling
							o_nxt
							HALT
					p_updateRes
						o_updt
						p_hasNextSibling
							o_nxt
							HALT
		Operation
			Name
				o_updt
			BDT
				p_hasNextSibling
					o_nxt
					HALT`;
	this.ltFiles['nonRecursiveCheck.lt'] = `Program
	Name
		nonRecursiveCheck
	StartOperation
		o_init
	Variables
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				ks
			Type
				Int
			Show
				True
		Variable
			Name
				kt
			Type
				Int
			Show
				True
		Variable
			Name
				res
			Type
				Bool
			Show
				True
		Variable
			Name
				s
			Type
				Tree
			Show
				True
		Variable
			Name
				sizeS
			Type
				Int
			Show
				True
		Variable
			Name
				sizeT
			Type
				Int
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				u
			Type
				Node
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				nonRecursiveCheck
			Arguments
				Argument
					s
				Argument
					t
				Argument
					u
				Argument
					v
			Output
				res
	Operations
		Operation
			Name
				o_cnt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Compare blocksizes"
				Assignment
					Variable
						sizeS'
					Expression
						(blockCardinality s u ks)
				Assignment
					Variable
						sizeT'
					Expression
						(blockCardinality t v kt)
		Operation
			Name
				o_false
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"FALSE"
				Assignment
					Variable
						res'
					Expression
						(False)
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"INIT"
				Assignment
					Variable
						res'
					Expression
						(True)
		Operation
			Name
				o_initcnt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Init block comparison"
				Assignment
					Variable
						ks'
					Expression
						(nextBlock s u 0)
				Assignment
					Variable
						kt'
					Expression
						(nextBlock t v 0)
				Assignment
					Variable
						sizeS'
					Expression
						0
				Assignment
					Variable
						sizeT'
					Expression
						0
		Operation
			Name
				o_nb
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Next Block"
				Assignment
					Variable
						ks'
					Expression
						(nextBlock s u ks)
				Assignment
					Variable
						kt'
					Expression
						(nextBlock t v kt)
	Predicates
		Predicate
			Name
				p_cSizeEq
			Expression
				((numberOfChildren s u) == (numberOfChildren t v))
		Predicate
			Name
				p_cSizeLt
			Expression
				((numberOfChildren s u) < (numberOfChildren t v))
		Predicate
			Name
				p_hasNB
			Expression
				(ks > 0)
		Predicate
			Name
				p_keq
			Expression
				(ks == kt)
		Predicate
			Name
				p_ksLt
			Expression
				(ks < kt)
		Predicate
			Name
				p_sBlockGt
			Expression
				(sizeS > sizeT)
		Predicate
			Name
				p_sizeEq
			Expression
				((sizeLogspace s u) == (sizeLogspace t v))
		Predicate
			Name
				p_sizeLt
			Expression
				((sizeLogspace s u) < (sizeLogspace t v))
		Predicate
			Name
				p_tBlockGt
			Expression
				(sizeT > sizeS)
	Flow
		Operation
			Name
				o_cnt
			BDT
				p_sBlockGt
					HALT
					p_tBlockGt
						o_false
						o_nb
		Operation
			Name
				o_false
			BDT
				HALT
		Operation
			Name
				o_init
			BDT
				p_sizeLt
					HALT
					p_sizeEq
						p_cSizeLt
							HALT
							p_cSizeEq
								o_initcnt
								o_false
						o_false
		Operation
			Name
				o_initcnt
			BDT
				p_ksLt
					HALT
					p_keq
						p_hasNB
							o_cnt
							o_false
						o_false
		Operation
			Name
				o_nb
			BDT
				p_ksLt
					HALT
					p_keq
						p_hasNB
							o_cnt
							o_false
						o_false`;
	this.ltFiles['numberOfChildren.lt'] = `Program
	Name
		numberOfChildren
	StartOperation
		o_init
	Variables
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				res
			Type
				Int
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				numberOfChildren
			Arguments
				Argument
					t
				Argument
					v
			Output
				res
	Operations
		Operation
			Name
				o_fc
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"FirstChild"
				Assignment
					Variable
						res'
					Expression
						(res + 1)
				Assignment
					Variable
						v'
					Expression
						(firstChild t v)
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"INIT"
				Assignment
					Variable
						res'
					Expression
						0
		Operation
			Name
				o_nxt
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"Next Sibling"
				Assignment
					Variable
						res'
					Expression
						(res + 1)
				Assignment
					Variable
						v'
					Expression
						(nextSibling t v)
	Predicates
		Predicate
			Name
				p_hasFirstChild
			Expression
				((firstChild t v) /= (createNode 0))
		Predicate
			Name
				p_hasNextSibling
			Expression
				(hasNextSibling t v)
	Flow
		Operation
			Name
				o_fc
			BDT
				p_hasNextSibling
					o_nxt
					HALT
		Operation
			Name
				o_init
			BDT
				p_hasFirstChild
					o_fc
					HALT
		Operation
			Name
				o_nxt
			BDT
				p_hasNextSibling
					o_nxt
					HALT`;
	this.ltFiles['sizeLogspace.lt'] = `Program
	Name
		sizeLogspace
	StartOperation
		o_init
	Variables
		Variable
			Name
				cmd
			Type
				Int
			Show
				True
		Variable
			Name
				exp
			Type
				[Char]
			Show
				True
		Variable
			Name
				res
			Type
				Int
			Show
				True
		Variable
			Name
				t
			Type
				Tree
			Show
				True
		Variable
			Name
				u
			Type
				Node
			Show
				True
		Variable
			Name
				v
			Type
				Node
			Show
				True
	Functions
		Function
			Name
				sizeLogspace
			Arguments
				Argument
					t
				Argument
					u
			Output
				res
	Operations
		Operation
			Name
				o_down
			Assignments
				Assignment
					Variable
						cmd'
					Expression
						1
				Assignment
					Variable
						exp'
					Expression
						"DOWN: CMD = 1"
				Assignment
					Variable
						res'
					Expression
						(res + 1)
				Assignment
					Variable
						v'
					Expression
						(firstChild t v)
		Operation
			Name
				o_init
			Assignments
				Assignment
					Variable
						cmd'
					Expression
						0
				Assignment
					Variable
						exp'
					Expression
						"INIT"
				Assignment
					Variable
						res'
					Expression
						1
				Assignment
					Variable
						v'
					Expression
						u
		Operation
			Name
				o_loop
			Assignments
				Assignment
					Variable
						exp'
					Expression
						"NOOP"
		Operation
			Name
				o_over
			Assignments
				Assignment
					Variable
						cmd'
					Expression
						2
				Assignment
					Variable
						exp'
					Expression
						"OVER: CMD = 2"
				Assignment
					Variable
						res'
					Expression
						(res + 1)
				Assignment
					Variable
						v'
					Expression
						(nextSibling t v)
		Operation
			Name
				o_up
			Assignments
				Assignment
					Variable
						cmd'
					Expression
						3
				Assignment
					Variable
						exp'
					Expression
						"UP: CMD = 3"
				Assignment
					Variable
						v'
					Expression
						(parent t v)
	Predicates
		Predicate
			Name
				p_downOrOver
			Expression
				((cmd == 1) || (cmd == 2))
		Predicate
			Name
				p_hasFirstChild
			Expression
				((firstChild t v) /= (createNode 0))
		Predicate
			Name
				p_hasNextSibling
			Expression
				(hasNextSibling t v)
		Predicate
			Name
				p_isLeaf
			Expression
				(isLeaf t v)
		Predicate
			Name
				p_loop
			Expression
				(v /= u)
	Flow
		Operation
			Name
				o_down
			BDT
				p_loop
					o_loop
					HALT
		Operation
			Name
				o_init
			BDT
				p_isLeaf
					HALT
					o_down
		Operation
			Name
				o_loop
			BDT
				p_downOrOver
					p_hasFirstChild
						o_down
						p_hasNextSibling
							o_over
							o_up
					p_hasNextSibling
						o_over
						o_up
		Operation
			Name
				o_over
			BDT
				p_loop
					o_loop
					HALT
		Operation
			Name
				o_up
			BDT
				p_loop
					o_loop
					HALT`;
}